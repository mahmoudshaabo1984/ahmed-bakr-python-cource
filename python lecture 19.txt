🧠 أولًا: أنواع البيانات داخل الكلاسات (Encapsulation)
في البرمجة الكائنية (OOP)، البيانات داخل الكلاس يمكن أن تكون:
1. Public – البيانات العامة
• 
أي متغير داخل الكلاس يمكن الوصول له من أي مكان سواء من داخل الكلاس أو من خارجه.
• 
مثلًا:
class Member:
    name = "Ahmed"

m = Member()
print(m.name)  # يطبع "Ahmed"
📌 تشبيه: كأن لون بيتك ظاهر للجميع، أي شخص معدي في الشارع يقدر يشوفه.
 
2. Protected – البيانات المحمية
• 
تكتب باستخدام شرطة سفلية واحدة _ قبل اسم المتغير.
• 
مجرد عرف (Convention) وليس حماية فعلية.
• 
يمكن الوصول لها من خارج الكلاس، لكن ينصح بعدم ذلك.
مثال:
class Member:
    _name = "Ahmed"

m = Member()
print(m._name)  # يشتغل، لكن غير مستحب استخدامه من الخارج
📌 تشبيه: إنت واقف في البلكونة، الناس شايفينك بس مش مفروض يكلموك إلا من خلال أخوك.
 
3. Private – البيانات الخاصة
• 
تكتب باستخدام شرطتين سفليتين __ قبل اسم المتغير.
• 
لا يمكن الوصول لها من خارج الكلاس مباشرة.
مثال:
class Member:
    __name = "Ahmed"

m = Member()
print(m.__name)  # Error
لحل هذه المشكلة، بنستخدم دوال:
 
🧩 Getter و Setter
• 
نستخدمهم للتعامل مع المتغيرات الخاصة.
✅ Getter:
ترجع قيمة المتغير:
class Member:
    def __init__(self):
        self.__name = "Ahmed"
    
    def get_name(self):
        return self.__name

m = Member()
print(m.get_name())  # Ahmed
✏️ Setter:
تعدل على قيمة المتغير:
    def set_name(self, new_name):
        self.__name = new_name

m.set_name("Mr. Perfect")
print(m.get_name())  # Mr. Perfect
 
🏷️ Property (تحويل الميثود لخاصية)
لو عندك دالة بترجع قيمة فقط (بدون ما تاخد input)، تقدر تحولها لخاصية باستخدام @property:
class Member:
    def __init__(self, age):
        self.age = age
    
    @property
    def age_in_days(self):
        return self.age * 365

m = Member(20)
print(m.age_in_days)  # 7300 بدون أقواس لأنها خاصية الآن
لكن لو الدالة تطلب input، ما ينفعش نستخدم @property:
def say_hello(self, msg):
    return f"Hello {msg}"

# لازم تنادى بالدالة باستخدام الأقواس: m.say_hello("Ahmed")
 
🧱 ABC – الكلاسات المجردة (Abstract Base Classes)
• 
كلاس لا يتم تنفيذه مباشرة، وإنما يُستخدم كقالب (تمبلت).
• 
أي كلاس يرث منه يجب أن يحتوي على نفس الدوال الموجودة فيه.
الخطوات:
. 1
استدعاء المكتبة:
from abc import ABC, abstractmethod
. 2
إنشاء كلاس مجرد:
class Language(ABC):

    @abstractmethod
    def has_oop(self):
        pass

    @abstractmethod
    def is_compiler(self):
        pass
. 3
إنشاء كلاس يرث منه ويلتزم بنفس التوقيعات:
class PythonLang(Language):
    def has_oop(self):
        return True

    def is_compiler(self):
        return False
لو نسيت تطبّق دالة من الدوال، هتحصل على خطأ.
 
✅ تلخيص سريع:
النوع
الوصف
يمكن الوصول له من الخارج؟
Public
عام – أي مكان
نعم
Protected
محمي – استخدام مش مستحب من الخارج
نعم (لكن غير موصى به)
Private
خاص – لا يمكن الوصول له مباشرة
لا (يحتاج Getter/Setter)